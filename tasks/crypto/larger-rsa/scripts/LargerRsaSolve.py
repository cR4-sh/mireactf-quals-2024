import decimal


q = 127787159701044612065899052890797222135520028885380926740884569334767250166063853250524042958313956033418141038078136459889741438868585477271590902613759353098539132162018419471570505229426227556490879895516176551336437395462533393801428075221000144517440895164381013774404439699114318990802126217885691500252965884181751170286624552311911306943656699704005737166430450384603105210606089656285844581666227317494824659421135277528926036491596058408907421023096406000407930381579706701847267795609159050709871171053225346906628175149620133998086434957035187390345642956780266156617408912842260900894729730389871481640072171938206209378304608870449750640473801560879437748345405636715029624699388093821399657103848465525870228102940934069171255834187754681188267239299920660871171551495783256220359919778839703181045445856305743821439814178932740641516735582214072393977255083705696735262102824950768382878517615020601812715893377380068468813431101612239991864199275517859428256706939537636404627632017851325853086205362477291289097548000840976538042221021478393766563723681982198000025649397883504637137585497907223769674186420071346995099092738806172397754099632461073630047355824675899915873740131854424671032873854899593518093027093
p = 1016748497889880673462039927751028783949580846977807820006874513713519130588900585981508392371944604438775440343131045775562218102950863242932419741400305712937049591361434311206404942934588746453588087749747473702097567904250589338778376646239628698799411231567672435596611583764276920033572350630090154429840925282878300644236550002852934653946865259519892548928443829291423610284249509655715755692154103509522336639079496199975918351352346477686651119730521364385472909779289966967973805097657723966601029380214265340534634330754389477861523562421733274756228336104030210601468711452885935324204986981274780480585656608617162867196296254949589659618274852536963598322366612696421167208319956398410215726012732839494093847652419176312716956966469568382740162350578905654236062105537302945556247435403784117936200252985859969832945800786557305939185485016007861028778536013217351132726005808748131791052966961895984553276594746602942762570238708030365309462926705222619699890461777726412318198794994021046805876730911680762074011633244119049897416409353379070638351506264598289450413338019076614532239461150517905609742676736099273282758995336656635481971325664941317647153339666643821252698997879482052222101961052456878080645958569

N = p*q
e = 23
flag = int.from_bytes(b"mireactf{1_th1nk_e_5h0uld_83_b1gg3r_t00}")


def crypt(text: int, e: int, n: int):
    encrypted_int = pow(text, e, n)

    return encrypted_int

def decrypt(ciphertext: int):
    decrypted_int = int(decimal.Decimal(ciphertext)**(decimal.Decimal('1')/e)).to_bytes(50, "big")

    return decrypted_int


decimal.getcontext().prec = 100

print(N)
print(e)
print(crypt(flag, e, N))
print(decrypt(crypt(flag, e, N)))