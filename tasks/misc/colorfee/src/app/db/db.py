import os
import asyncpg

from dotenv import load_dotenv


load_dotenv()


DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_DATABASE = os.getenv("DB_DATABASE")
DB_HOST = os.getenv("DB_HOST")
FLAG = os.getenv("FLAG")


class Coffee:
    def __init__(self):
        self.db_pool = None

    async def setup(self):
        self.db_pool = await asyncpg.create_pool(
            user=DB_USER,
            password=DB_PASSWORD,
            database=DB_DATABASE,
            host=DB_HOST
        )
        await self.create_tables()
        await self.populate_products()

    async def create_tables(self):
        async with self.db_pool.acquire() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS Users (
                    user_id BIGINT PRIMARY KEY,
                    balance INTEGER NOT NULL DEFAULT 0,
                    last_purchase TEXT
                );
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS Products (
                    id SERIAL PRIMARY KEY,
                    name TEXT NOT NULL UNIQUE,
                    price INTEGER NOT NULL,
                    purchase_text TEXT NOT NULL
                );
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS Orders (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT REFERENCES Users(user_id),
                    product_id INTEGER REFERENCES Products(id),
                    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
                );
            ''')

    async def populate_products(self):
        products = [
            ("üçä –¶–∏—Ç—Ä—É—Å–æ–≤—ã–π –†–∞—Ñ", 0, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É üçä –¶–∏—Ç—Ä—É—Å–æ–≤—ã–π –†–∞—Ñ! –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –Ω–∞ –∫–∞—Å—Å–µ. –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑: RAF_coupon_20 ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ –∫–∞—Å—Å—É."),
            ("üü¢ –ú–∞—Ç—á–∞ –õ–∞—Ç—Ç–µ–∞—Ç–æ", 150, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É üü¢ –ú–∞—Ç—á–∞ –õ–∞—Ç—Ç–µ–∞—Ç–æ! –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –Ω–∞ –∫–∞—Å—Å–µ. –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑: Latte_coupon_30 ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ –∫–∞—Å—Å—É."),
            ("üçì –ö–ª—É–±–Ω–∏—á–Ω—ã–π –≠–ª–∏–∫—Å–∏—Ä", 200, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É üçì –ö–ª—É–±–Ω–∏—á–Ω—ã–π –≠–ª–∏–∫—Å–∏—Ä! –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –Ω–∞ –∫–∞—Å—Å–µ. –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑: Stawberry_coupon_40 ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ –∫–∞—Å—Å—É."),
            ("ü¶ã <b>–•–ò–¢: –ì–æ–ª—É–±–∏–Ω–Ω—ã–π –û–∞–∑–∏—Å</b>", 1337, FLAG)
        ]
        async with self.db_pool.acquire() as conn:
            for name, price, purchase_text in products:
                await conn.execute(f'''
                    INSERT INTO Products (name, price, purchase_text)
                    VALUES ('{name}', {price}, '{purchase_text}')
                    ON CONFLICT (name) DO NOTHING;
                ''')

    async def add_new_user(self, user_id):
        async with self.db_pool.acquire() as conn:
            await conn.execute(f'''
                INSERT INTO Users (user_id) VALUES ({user_id})
                ON CONFLICT (user_id) DO NOTHING;
            ''')

    async def get_user_balance(self, user_id):
        async with self.db_pool.acquire() as conn:
            return await conn.fetchval(f'''
                SELECT balance FROM Users WHERE user_id = {user_id};
            ''')

    async def get_user_last_purchase(self, user_id):
        async with self.db_pool.acquire() as conn:
            return await conn.fetchval(f'''
                SELECT last_purchase FROM Users WHERE user_id = {user_id};
            ''')

    async def get_products(self):
        async with self.db_pool.acquire() as conn:
            products = await conn.fetch(f'''
                    SELECT id, name, price FROM products;
                ''')
            if products:
                return products
            else:
                return "–¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"

    async def make_purchase(self, user_id, product_id):
        async with self.db_pool.acquire() as conn:
            price_query = f"SELECT price FROM Products WHERE id = {product_id};"
            price = await conn.fetchval(price_query)

            if price is None:
                return f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"

            balance_query = f"SELECT balance FROM Users WHERE user_id = {user_id};"
            balance = await conn.fetchval(balance_query)

            if balance >= price:
                purchase_text_query = f"SELECT purchase_text FROM Products WHERE id = {product_id};"
                purchase_text = await conn.fetchval(purchase_text_query)

                new_balance = balance - price

                update_query = f"UPDATE Users SET balance = {new_balance}, last_purchase = '{purchase_text}' WHERE user_id = {user_id};"
                await conn.execute(update_query)

                return purchase_text
            else:
                return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

