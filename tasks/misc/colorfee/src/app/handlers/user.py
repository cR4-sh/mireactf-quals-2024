from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

from app.keyboards import user as keyboard
from app.utils.debug import debug_message_handler, debug_callback_handler
from app.utils.states import BuyForm
from loader import bot, db

router = Router()

start_photo_id = "AgACAgIAAxkBAANPZderBzAy2deITswzveoVkRD-fz8AAoHUMRsAAUrBSrc4wYIPmxTAAQADAgADeQADNAQ"
products_photo_id = "AgACAgIAAxkBAANSZderGfEQh2ITg_pd4iFT1_8tU7QAAoLUMRsAAUrBSk9pUK99eRc6AQADAgADeQADNAQ"


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
@debug_message_handler
async def start(message: Message, state: FSMContext):
    await state.clear()
    await db.add_new_user(message.from_user.id)
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º" \
           " –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –∫–æ—Ñ–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" \
           " —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ—Ñ–µ–π–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ —Ü–í–µ–¢‚òïÔ∏è"

    await message.answer_photo(photo=start_photo_id, caption=text,
                               reply_markup=keyboard.main)


# –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∏—Ç—å
@router.message(F.text == keyboard.cancel_button_text)
@debug_message_handler
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(keyboard.mainmenu_text, reply_markup=keyboard.main)


# –ö–Ω–æ–ø–∫–∞ üõí –¢–æ–≤–∞—Ä—ã
@router.message(F.text == keyboard.products_button_text)
@debug_message_handler
async def products(message: Message, state: FSMContext):
    await state.set_state(BuyForm.position)

    products_items = await db.get_products()
    if products_items == "–¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ç–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return

    text = "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è! –í —á–µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ñ–µ–π–Ω–∏ –º—ã –≥–æ—Ç–æ–≤–∏–º –≤—Å–µ–º –∂–µ–ª–∞—é—â–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¶–∏—Ç—Ä—É—Å–æ–≤—ã–π –†–∞—Ñ üçäüí•\n\n" \
           "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é:\n" \
           "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"

    for index, product in enumerate(products_items, start=1):
        text += f"{index}. {product['name']} | {product['price']}‚ÇΩ\n"

    text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å"

    await message.answer_photo(photo=products_photo_id, caption=text,
                               reply_markup=keyboard.cancel,
                               parse_mode=ParseMode.HTML)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
@router.message(BuyForm.position)
@debug_message_handler
async def confirm_buy(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(position=message.text)
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —ç—Ç–æ—Ç –Ω–∞–ø–∏—Ç–æ–∫?",
                         reply_markup=keyboard.confirm_ikb)
    await state.set_state(BuyForm.confirm)


# –ö–Ω–æ–ø–∫–∞ –î–∞ –∏ –ù–µ—Ç –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏
@router.callback_query()
@debug_callback_handler
async def purchase(callback_query: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback_query.from_user.id,
                             message_id=callback_query.message.message_id)
    if await state.get_state() != BuyForm.confirm:
        return

    if callback_query.data == 'confirm':
        product_id = (await state.get_data())["position"]
        text = await db.make_purchase(callback_query.from_user.id, product_id)
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=text, reply_markup=keyboard.main)
    else:
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=keyboard.mainmenu_text,
                               reply_markup=keyboard.main)
    await state.clear()


# –ö–Ω–æ–ø–∫–∞ ‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å
@router.message(F.text == keyboard.profile_button_text)
@debug_message_handler
async def profile_info(message: Message):
    text = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n"
    if message.from_user.username:
        text += f"üîë –õ–æ–≥–∏–Ω: {message.from_user.username}\n"

    user_balance = await db.get_user_balance(message.from_user.id)
    text += f"üí≥ ID: {message.from_user.id}\n\n" \
            f"üè¶ –ë–∞–ª–∞–Ω—Å: {user_balance} —Ä—É–±.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"

    user_last_purchase = await db.get_user_last_purchase(message.from_user.id)
    if user_last_purchase:
        text += f"\n–í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞:\n{user_last_purchase}"

    await message.answer(text=text, reply_markup=keyboard.main)


# –ö–Ω–æ–ø–∫–∞ üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
@router.message(F.text == keyboard.replenishment_button_text)
@debug_message_handler
async def profile_info(message: Message):
    await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ —Å–ª–æ–º–∞–Ω–∞ –∏ –±—É–¥–µ—Ç"
                         " –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ 2077 –≤–µ–∫–µ. –ü—Ä–∏–Ω–æ—Å–∏–º"
                         " –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ :(",
                         reply_markup=keyboard.main)


# –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–≤—à–µ–µ –≤ –¥—Ä—É–≥–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
@router.message()
@debug_message_handler
async def any_message(message: Message, state: FSMContext):
    await state.clear()
    await db.add_new_user(message.from_user.id)
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º" \
           " –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –∫–æ—Ñ–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" \
           " —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ—Ñ–µ–π–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ —Ü–í–µ–¢‚òïÔ∏è"

    await message.answer_photo(photo=start_photo_id, caption=text,
                               reply_markup=keyboard.main)

